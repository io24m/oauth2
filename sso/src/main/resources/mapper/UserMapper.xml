<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.io24m.oauth2.sso.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.github.io24m.oauth2.sso.domain.User">
    <id column="account" jdbcType="VARCHAR" property="account" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="enable" jdbcType="BOOLEAN" property="enable" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="last_login_time" jdbcType="TIMESTAMP" property="lastLoginTime" />
    <result column="last_login_error_time" jdbcType="TIMESTAMP" property="lastLoginErrorTime" />
    <result column="login_error_count" jdbcType="INTEGER" property="loginErrorCount" />
  </resultMap>
  <sql id="Base_Column_List">
    account, `password`, `enable`, `name`, last_login_time, last_login_error_time, login_error_count
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where account = #{account,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from user
    where account = #{account,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" keyColumn="account" keyProperty="account" parameterType="com.github.io24m.oauth2.sso.domain.User" useGeneratedKeys="true">
    insert into user (`password`, `enable`, `name`, 
      last_login_time, last_login_error_time, 
      login_error_count)
    values (#{password,jdbcType=VARCHAR}, #{enable,jdbcType=BOOLEAN}, #{name,jdbcType=VARCHAR}, 
      #{lastLoginTime,jdbcType=TIMESTAMP}, #{lastLoginErrorTime,jdbcType=TIMESTAMP}, 
      #{loginErrorCount,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" keyColumn="account" keyProperty="account" parameterType="com.github.io24m.oauth2.sso.domain.User" useGeneratedKeys="true">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="password != null">
        `password`,
      </if>
      <if test="enable != null">
        `enable`,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="lastLoginTime != null">
        last_login_time,
      </if>
      <if test="lastLoginErrorTime != null">
        last_login_error_time,
      </if>
      <if test="loginErrorCount != null">
        login_error_count,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="enable != null">
        #{enable,jdbcType=BOOLEAN},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="lastLoginTime != null">
        #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginErrorTime != null">
        #{lastLoginErrorTime,jdbcType=TIMESTAMP},
      </if>
      <if test="loginErrorCount != null">
        #{loginErrorCount,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.github.io24m.oauth2.sso.domain.User">
    update user
    <set>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="enable != null">
        `enable` = #{enable,jdbcType=BOOLEAN},
      </if>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="lastLoginTime != null">
        last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginErrorTime != null">
        last_login_error_time = #{lastLoginErrorTime,jdbcType=TIMESTAMP},
      </if>
      <if test="loginErrorCount != null">
        login_error_count = #{loginErrorCount,jdbcType=INTEGER},
      </if>
    </set>
    where account = #{account,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.github.io24m.oauth2.sso.domain.User">
    update user
    set `password` = #{password,jdbcType=VARCHAR},
      `enable` = #{enable,jdbcType=BOOLEAN},
      `name` = #{name,jdbcType=VARCHAR},
      last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
      last_login_error_time = #{lastLoginErrorTime,jdbcType=TIMESTAMP},
      login_error_count = #{loginErrorCount,jdbcType=INTEGER}
    where account = #{account,jdbcType=VARCHAR}
  </update>
</mapper>